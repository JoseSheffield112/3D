It is advised to first do scaling operations, then rotations and lastly translations when combining matrices otherwise they may (negatively) affect each other


OpenGL expects all the vertices, that we want to become visible, to be in normalized device coordinates after each vertex shader run. That is, the x, y and z coordinates of each vertex should be between -1.0 and 1.0

Important: remember that the matrices precede the vertices they are transforming. Thus they are in the order projection, view, model, so that the model matrix is the first applied to a vertex

 The method Mat4.toFloatArrayForGLSL() is used to do this. It converts the row-column ordered matrix into a column-row ordered matrix stored in an array of floats which is what is required in the data type used in the vertex shader. 

we can try to simulate one [camera] by moving all objects in the scene in the reverse direction, giving the illusion that we are moving

Don't forget that the positive z-axis is going through your screen towards you so if we want the camera to move backwards, we move along the positive z-axis. 

If we would then multiply the light source's color with an object's color value, the resulting color would be the reflected color of the object (and thus its perceived color). 

can thus define an object's color as the amount of each color component it reflects from a light source

The higher the shininess value of an object, the more it properly reflects the light instead of scattering it all around and thus the smaller the highlight becomes

The advantage of doing lighting in the vertex shader is that it is a lot more efficient since there are generally a lot less vertices compared to fragments, so the (expensive) lighting calculations are done less frequently

Blinn-phone model : The closer this halfway vector aligns with the surface's normal vector, the higher the specular contribution
		
			Another subtle difference between Phong and Blinn-Phong shading is that the angle between the halfway vector and the surface normal is often shorter than the angle between the view and reflection vector. As a result, to get visuals similar to Phong shading the specular shininess exponent has to be set a bit higher. A general rule of thumb is to set it between 2 and 4 times the Phong shininess exponent

It is assumed that before this method [Mesh] is called, other information such as textures are already enabled

In the programs that you write, you need to decide if the fragment shader should just use the values from the texture maps or also combine these with the Material properties.

// The following matrix transform is irrelevant for this program. 
  // This is because the model matrix for the object
  // is ignored when a scene graph is used.
  // Instead, the scene graph supplies the transformations.
(Note: the modelMatrix set up when initialising the cube is not used when drawing an object as part of a scene graph. Thus, in this example the modelMatrix could be set to the identity matrix, new Mat4(1).)




