/*
I have created this code using the online resource of openGL:
  https://learnopengl.com/Lighting/Multiple-lights
  As well as shader code from Dr.Maddocks lab classes

  TO-DO
  PLEASE clean this up... it all looks atrocious
*/
#version 330 core

/*
Structures
*/

//Material
struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 

/*
dealing with a directional light source
*/
struct DirLight {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
}; 

/*
Dealing with point light
*/
struct PointLight {
    vec3 position;
    float constant;
    float linear;
    float quadratic;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

/*
Dealing with a spot light
*/
struct SpotLight {
    vec3 position;
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular; 
    float constant;
    float linear;
    float quadratic;  
    float cutOff;
    float outerCutOff;    
};

/*
In/Out variables
*/

//In
in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

//out
out vec4 fragColor;

/*
Uniforms
*/

uniform vec3 viewPos;

uniform sampler2D first_texture;
uniform sampler2D second_texture;

uniform Material material;

uniform DirLight dirLight;

#define POINT_LIGHTS 6
uniform PointLight pointLight[POINT_LIGHTS];

uniform SpotLight spotLight;

/*
Functions

The following 4 functions were heavily copied from the highlighted website/resource
I have made minor modifications so they work with my code, but it is still largely not written by me

Again, sourced from : https://learnopengl.com/Lighting/Multiple-lights

*/

// Calculating the directional lighting
vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir){
  vec3 lightDir = normalize(light.position - aPos);
  // diffuse shading
  float diff = max(dot(normal, lightDir), 0.0);
  // specular shading
  vec3 reflectDir = reflect(-lightDir, normal);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  // combine results
  vec3 ambient  = light.ambient * material.ambient * texture(first_texture, aTexCoord).rgb;
  vec3 diffuse  = light.diffuse * (diff * material.diffuse) * texture(first_texture, aTexCoord).rgb;
  vec3 specular = light.specular * (spec * material.specular) * texture(second_texture, aTexCoord).rgb;
  return (ambient + diffuse + specular);
}


// Calculating point light!
vec3 calcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir){
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // combine results
    vec3 ambient = light.ambient * vec3(texture(first_texture, aTexCoord));
    vec3 diffuse = light.diffuse * diff * vec3(texture(first_texture, aTexCoord));
    vec3 specular = light.specular * spec * vec3(texture(second_texture, aTexCoord));
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}

// Calculating a spot light
vec3 calcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir){
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // spotlight intensity
    float theta = dot(lightDir, normalize(-light.direction)); 
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    // combine results
    vec3 ambient = light.ambient * vec3(texture(first_texture, aTexCoord));
    vec3 diffuse = light.diffuse * diff * vec3(texture(first_texture, aTexCoord)); 
    vec3 specular = light.specular * spec * vec3(texture(second_texture, aTexCoord));
    ambient *= attenuation * intensity;
    diffuse *= attenuation * intensity;
    specular *= attenuation * intensity;
    return (ambient + diffuse + specular);
}

void main() {
  // properties
  vec3 norm = normalize(aNormal);
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 result, result2;

  // phase 1: Directional lighting
  // looping over the different sources!
  result += calcDirLight(dirLight, norm, viewDir);
  // phase 2 - point light
  for(int i=0; i<POINT_LIGHTS; i++){
    result += calcPointLight(pointLight[i], norm, aPos, viewDir);  
  }
  //offsetting the number of ceiling lights!
  result +=  (result2/POINT_LIGHTS);
  //phase 3 - spot light
  result += calcSpotLight(spotLight, norm, aPos, viewDir);  

  fragColor = vec4(result, 1.0);
}